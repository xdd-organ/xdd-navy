动态查看日志 : tail -f
	tail -f /usr/local/tomcat/logs/catalina.out
杀死进程 : kill -9 25462(进程id)
查看启动的Java的进程 : ps -ef|grep java
	/usr/local/tomcat/bin/startup.sh


数据库 : distinct  去重复

html:
	input标签->placeholder属性，预显示

openCV 246  人脸识别  
jqprint  前端打印技术


freemarker:
	默认值：
		${mouse!"No mouse."}
		<#assign mouse="Jerry">
		${mouse!"No mouse."}
		输出：
		No mouse.
		Jerry
	内建函数：
		html:字符串中所有的特殊HTML字符都需要用实体引用来代替比如<代替&lt;）。 ${test?html}
		cap_first:字符串的第一个字母变为大写形式 ${seasons[1]?cap_first}
		lower_case:字符串的小写形式
		upper_case:字符串的大写形式
		trim:去掉字符串首尾的空格序列使用的内建函数：
		size：序列中元素的个数数字使用的内建函数：  ${seasons?size}
		int:数字的整数部分（比如-1.9?int就是-1）
		
		内建函数		如果值是...时返回true
		is_string		字符串
		is_number		数字
		is_boolean		布尔值
		is_date			日期（所有类型：仅日期，仅时间和时间日期）
		is_method		方法
		is_transform	变换
		is_macro		宏
		is_hash			哈希表
		is_hash_ex		扩展的哈希表（也就是支持?keys和?values）
		is_sequence		序列
		is_collection	集合
		is_enumerable	序列或集合
		is_indexable		序列
		is_directive		指令的类型（比如宏，或TemplateDirectiveModel，TemplateTransformModel等）
		is_node			节点
		
	在list循环中，有两个特殊的循环变量可用：
		item_index：这是一个包含当前项在循环中的步进索引的数值。
		item_has_next：来辨别当前项是否是序列的最后一项的布尔值。
		
	检测不存在：
		访问非顶层变量的使用规则和默认值操作符也是一样的，即product.color??和(product.color)??

当调用一个宏函数的时候，你仅仅可以使用在macro指定中定义参数（这个例子中是：person和color）。
那么当你尝试<@greet person="Fred" color="black" background="green"/>

${dateVar?string("yyyy-MM-dd HH:mm:ss zzzz")} 日期格式化 freemaker


异步上传文件(http://www.jq22.com/jquery-info230)
需要一个input元素：<input id="fileupload" type="file" name="file[]" multiple>
需要加载的js文件有: jquey-1.8.3.min.js
					jquery-ui-widget.js
					jquery.iframe-transport.js
					jquery.fileupload.js

$('#fileupload').fileupload({
	url : "";
	dataType: 'json', //数据类型为json
	done: function (e, data) { //设置文件上传完毕事件的回调函数
		$.each(data.result.files, function (index, file) {
			$('<p/>').text(file.name).appendTo(document.body);
		});
	},
	progressall: function (e, data) { //显示每个文件的上传进度(progress)显示和所有文件的总体上传进度(progressall)显示
		var progress = parseInt(data.loaded / data.total * 100, 10);
		$('#progress .bar').css('width',progress + '%');
	},
	add: function (e, data) { //你可以经常要将上传的文件显示到特定的元素上，这个可以通过add回调函数来实现：
		data.context = $('<p/>').text('Uploading...').appendTo(document.body);
		data.submit();
	},
});

jQuery 异步请求
$.ajax({
	type: "POST",
	url: url,
	data: JSON.stringify(data),
	contentType: "application/json",
	async: false,
	xhrFields: {
		withCredentials: true //跨域问题
	},
	success: function(data) {
		if (data.error_code == 'Y10000') {
			$scope.pageData = data.datas.list; //分页数据
			$scope.companyStockList = data.datas.list.list;
		}
	},
	error: function(err) {
		console.log(err);
	}
});


FCKeditor(富文本编辑器) http://blog.imwebs.com/article.asp?id=322
Jquery-fileupload(Jquery文件上传) http://www.jq22.com/jquery-info230
js常用正则表达式 http://www.cnblogs.com/zfc2201/archive/2012/12/18/2824107.html


自己电脑
RabbitMQ：账号：admin 密码：123456
虚拟机Linux：账号：admin  密码：admin
mysql： 账号：root  密码：123456

mysql -u root -p

阿里云linux的nginx的位置
/etc/nginx

AngularJS

@CrossOrigin
@ResponseBody
@RequestMapping(value = "/findAllByPid",method = RequestMethod.POST)
public JSONObject findAllByPid(@RequestBody String params){
	//TODO
}

原生JS
	console.log(window.location.protocol);		http:
	console.log(window.location.host);			localhost:18080
	console.log(window.location.port);			18080
	console.log(window.location.hostname);		localhost
	console.log(window.location.pathname);		/

	
/算法/模式/补码方式

linux命令：
	解压.tar.gz
		tar -xzvf xxx.tar.gz
	检测Linux端口开放情况
		netstat -tlanp | grep 3306
	编辑系统命令
		vim /root/.bashrc
	使配置立即生效
		source /root/.bashrc
	查看内存使用量
		ps aux|sort -rnk 4
	查看CPU使用量
		ps aux|sort -nk 3
	下载文件
		wget http://www.erlang.org/download/otp_src_19.2.tar.gz
	服务器抓包(功能强大)
		tcpdump -i eth0 host 172.17.231.113 and dst port 8080   抓取这个主机并且端口是8080的包
	扫描端口
		yum install nc -y(安装nc命令)
		nc -v 172.17.231.113 -z 8079-8081
	查看Linux系统位数(32/64)
		getconf LONG_BIT
	更改所属组(-R递归所有子文件)
		chgrp -R www 201705122/
	更改所属用户(-R递归所有子文件)
		chown -R www 201705122/
	建立软连接(ln -s 源文件 目标文件)
		ln -s redis-4.0.0/src/redis-server  link


centOS6.6下安装mysql(方式一)：
	yum install mysql-server
	注意：在linux防火墙上开放3306端口
		vi  /etc/sysconfig/iptables(增加下面这句)
		
		*filter
		:INPUT ACCEPT [0:0]
		:FORWARD ACCEPT [0:0]
		:OUTPUT ACCEPT [0:0]
		-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT(这句)
		COMMIT
		
		service mysql status(查看MySQL运行状态) service mysql stop(停止mysql服务) service mysql start(启动mysql服务) 
	卸载mysql
		rpm -qa | grep -i mysql(查找mysql相关的程序包的命令)
		rpm -e --nodeps mysql-libs-5.1.73-8.el6_8.i686(卸载命令)
		whereis mysql(查找有mysql对应的文件夹)
centOS6.6下安装mysql(方式二)：
	wget http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.33-linux-glibc2.5-x86_64.tar.gz(64位)
	wget http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.33-linux-glibc2.5-i686.tar.gz(32位)
	
	#解压
	tar -zxvf mysql-5.6.33-linux-glibc2.5-i686.tar.gz
	#复制解压后的mysql目录
	cp -r mysql-5.6.33-linux-glibc2.5-i686 /usr/local/mysql
	
	#添加用户组
	groupadd mysql
	#添加用户mysql 到用户组mysql
	useradd -g mysql mysql
	
	cd /usr/local/mysql/
	mkdir ./data/mysql
	chown -R mysql:mysql ./
	./scripts/mysql_install_db --user=mysql --datadir=/usr/local/mysql/data/mysql
	    (centOS7.2下执行上一句会报错
        FATAL ERROR: please install the following Perl modules before executing /usr/bin/mysql_install_db: Data::Dumper
        解决办法：yum install -y perl-Module-Install.noarch
        Installing MySQL system tables..../bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory
        解决办法：yum install libaio* -y)

	cp support-files/mysql.server /etc/init.d/mysqld
	chmod 755 /etc/init.d/mysqld
	cp support-files/my-default.cnf /etc/my.cnf
	 
	#修改启动脚本
	vim /etc/init.d/mysqld
	 
	#修改项：
	basedir=/usr/local/mysql/
	datadir=/usr/local/mysql/data/mysql
	 
	#启动服务
	service mysqld start
		(centOS7.2下执行上一句会报错
		Starting MySQL...The server quit without updating PID file [FAILED]cal/mysql_5_7_3306/data/iZwz954rky6nphp7848z4zZ.pid).
		解决办法：检查mysql的logs目录是否存在，error.log是否存在，data目录是否存在
		)
	 
	#测试连接
	./mysql/bin/mysql -uroot
	
	#加入环境变量，编辑 /etc/profile，这样可以在任何地方用mysql命令了
	export PATH=$PATH:/usr/local/mysql/bin
	source /etc/profile
	 
	#启动mysql
	service mysqld start
	#关闭mysql
	service mysqld stop
	#查看运行状态
	service mysqld status
	
	#第一次连接创建用户密码
	./mysqladmin -uroot password
	##授权远程连接
	#所有IP都可以连接mysql
	update user set host='%' where user='root';
	#授权
	GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION; 
	#刷新权限
	flush privileges; 
	

	
centOS6.6下安装mysql(不同端口)：
	(区别)
	cp support-files/mysql.server /etc/init.d/mysqld_3381
	
	#修改启动脚本
	vi /etc/init.d/mysqld_3381
	#修改项：
	basedir=/usr/local/mysqld_3381/
	datadir=/usr/local/mysqld_3381/data/mysql
	
	#启动mysql
	service mysqld_3381 start

centOS6.6下安装mysql(mysql主从复制)：
	主操作(3306)：
		SHOW MASTER STATUS;
		GRANT replication slave  ON *.* TO 'user'@'%' IDENTIFIED BY 'user'; (创建主从复制账号)
		flush privileges;
	从操作(3381)：
	CHANGE MASTER TO
		master_host='192.168.50.128',  	-- 主机ip
		master_user='user',				-- 账号
		master_password='user',			-- 密码
		master_port=3306,				-- 端口
		master_log_file='mysql_3306_bin.000003',	-- 二进制文件
		master_log_pos=1454;						-- 二进制文件位置
		START SLAVE;								-- 启动slave同步
		stop slave;									-- 停止从同步
		SHOW SLAVE STATUS;
		
		查看	slave_id_running与slave_sql_running结果都为yes
		
	
	
centOS6.6下安装solr-4.10.3.tgz：
	#把solr的压缩包上传到服务器后并解压，然后把solr-4.10.3/dist/solr-4.10.3.war包部署到tomcat下。并改名为solr.war
	tar -zxf solr-4.10.3.tgz
	cp solr-4.10.3.war /usr/local/solr/tomcat/webapps/solr.war
	#把solr-4.10.3/example/lib/ext 目录下所有的jar包复制到solr工程中
	cp * /usr/local/solr/tomcat/webapps/solr/WEB-INF/lib/
	#创建solrhome文件夹，该文件夹用来存放solr服务器所有配置文件。将/root/solr-4.10.3/example中的solr文件夹拷贝至solrhome
	cp -r solr /usr/local/solr/solrhome
	#在solr工程中的web.xml文件中指定solrhome的位置
	<env-entry>
		<env-entry-name>solr/home</env-entry-name>
		<env-entry-value>/usr/local/solr/solrhome</env-entry-value>
		<env-entry-type>java.lang.String</env-entry-type>
	</env-entry>
	#启动tomcat
	访问:http://192.168.50.128:8080/solr
	
centOS6.6下安装多个tomcat：
	修改3处端口号：
	第一处：8080
	<Connector port="8080" protocol="HTTP/1.1" 
               maxThreads="150" connectionTimeout="20000" 
               redirectPort="8443" />
	第二处：8009
	<Connector port="8009" enableLookups="false" redirectPort="8443" debug="0" protocol="AJP/1.3" />
	第三处：8005
	<Server port="8005" shutdown="SHUTDOWN" debug="0">
	
centOS6.6下安装git
	安装git
	yum install git -y
	查看git版本
	git --version
	
	服务器端创建 xdd 用户，用来管理 Git 服务，并为 git 用户设置密码
	查看git有没有某个用户
	id xdd
	添加xdd用户
	useradd xdd
	设置git用户密码
	passwd xdd
	
	创建仓库
	mkdir demo1.git   (demo1.git是一个文件夹)
	初始化仓库
	git init --bare demo1.git		-- 服务器操作完成
	
	
	
	
	
	客户端操作(需要输入密码)		-- 客户端提交代码，可能参考会遇到权限问题
	git clone xdd@192.168.56.101:/usr/local/git/repository/demo1.git
	
centOS7.2下安装jdk1.8
	1.将jdk-8u144-linux-x64.tar.gz拷贝到centOS7.2中
	2.解压 tar -zxvf jdk-8u144-linux-x64.tar.gz
	3.vim /etc/profile
	4.在第三步文件末尾行添加
		#set java environment
		JAVA_HOME=/usr/local/src/java/jdk1.7.0_79
		CLASSPATH=.:$JAVA_HOME/lib.tools.jar
		PATH=$JAVA_HOME/bin:$PATH
		export JAVA_HOME CLASSPATH PATH
	5.source /etc/profile  使更改的配置立即生效
	6.java -version  查看JDK版本信息，如果显示出1.8.0_144证明成功
	
centOS7.2下安装nginx1.2(方式一)
	1.安装pcre
		1.获取pcre编译安装包，在http://www.pcre.org/上可以获取当前最新的版本
		2.解压缩pcre2-10.30.tar.gz包。
		3.进入解压缩目录，执行./configure –-prefix=/usr/local/pcre
		4.make & make install
		
	2.安装openssl
		获取openssl编译安装包，在http://www.openssl.org/source/上可以获取当前最新的版本。
		解压缩openssl-1.1.0f.tar.gz包。
		进入解压缩目录，执行./config –-prefix=/usr/local/openssl/openssl
		make & make install
		
	3.安装zlib
		获取zlib编译安装包，在http://www.zlib.net/上可以获取当前最新的版本。
		解压缩zlib-1.2.11.tar.gz包。
		进入解压缩目录，执行./configure --prefix=/usr/local/zlib/zlib
		make & make install
		
	4.安装nginx
		获取nginx，在http://nginx.org/en/download.html上可以获取当前最新的版本。
		解压缩nginx-1.12.1.tar.gz包。
		进入解压缩目录，执行./configure --prefix=/usr/local/nginx/nginx --with-http_ssl_module --with-openssl=/usr/local/openssl/openssl --with-pcre=/usr/local/pcre/pcre --with-zlib=/usr/local/zlib/zlib
		make & make install
		
		警告：如第四部出错，则用方式二安装nginx所需要插件，然后再执行第四部
		
	备注(方式二)：
		nginx的一些模块依赖一些lib库，在安装nginx之前，须先安装这些lib库，
		依赖库主要有g++、gcc、openssl-devel、pcre-devel和zlib-devel 所以执行如下命令安装
		1.yum install gcc-c++ 
		2.yum install pcre pcre-devel  
		3.yum install zlib zlib-devel 
		4.yum install openssl openssl--devel  
		5.  wget http://nginx.org/download/nginx-1.9.14.tar.gz
		6. tar xvzf nginx-1.9.14.tar.gz 
		7. ./configure 
		8.make && make install
		9. cd /usr/local/nginx/sbin
		10. ./nginx 
		
		#nginx配置一个server
		server {
			listen       80;
			server_name  localhost;

			location / {
				root /usr/local/tomcat/tomcat_8080/webapps/ROOT;
				index index.html;
			}

			location ~ {
				proxy_pass http://127.0.0.1:8080;
			   # include proxy.conf;
			}
		}

	


	
centOS6.6下安装redis：
	解压 -> redis-2.8.11.tar.gz
	在解压目录下使用 -> make (编译)
	redis-server在编译目录的 -> src
	
	启动：
		./redis-server ../redis.conf(后台启动：配置文件daemonize设置为yes)
	停止：
		./redis-cli shutdown
		auth password  (redis密码)


GitHub
	上传命定：
		1.git init																		-- 初始化GitHub
		2.git add .																		-- 添加上传文件(.为所有文件)
		3.git commit -m '这是注释'														-- 添加注释
		4.git remote add origin https://github.com/xdd-object/xxx.git		-- 关联GitHub地址
		5.git pull --rebase origin master												-- 获取远程库与本地同步合并（如果远程库不为空必须做这一步，否则后面的提交会失败）
		6.git push -u origin master														-- 上传文件(需验证用户名与密码)
		7.git status																	-- 获取状态
		
	其他常用命令
		1.git rm pom.xml																-- 删除GitHub上的文件
		2.git clone https://github.com/xdd-object/xxx.git g:\xdd				-- 将文件下载到指定目录


input->placeholder属性，预显示


Mysql
alter table _address add _address_type int DEFAULT 1;  -- 添加字段

ALTER TABLE _address MODIFY _address_type int COMMENT '1:普通地址，2：发票收货地址';  -- 字段添加注释

-- 批量导入数据
LOAD DATA INFILE 'C:\Users\qw\Desktop\a3.txt' IGNORE INTO TABLE USER CHARACTER SET 'utf8' FIELDS
TERMINATED BY ',' OPTIONALLY ENCLOSED BY '' ESCAPED BY '' LINES TERMINATED BY '\n'(id,username,PASSWORD) ;



win10下安装node与browser-sync
	安装node
	http://nodejs.cn/download/		-- 选择版本下载
	配置系统path						-- 让全局都可以使用node命令(ism版，默认配置的path)

	安装browser-sync(基于node)
	npm install -g browser-sync		-- 安装(node目录下使用/nodejs/)
	使用
	browser-sync start --server --files "**"

windows上传文件到Linux
    1.下载putty-64bit-0.70-installer.msi(https://the.earth.li/~sgtatham/putty/0.70/w64/putty-64bit-0.70-installer.msi)
    2.安装putty-64bit-0.70-installer.msi
    3.在控制台使用命令pscp(不报错，则安装成功)
    4.pscp G:\xdd\soft\logs\mycat.log root@192.168.50.128:/usr/local/rz(上传文件到Linux命令)
    4.1.pscp -r G:\xdd\soft\logs\abc root@192.168.50.128:/usr/local/rz(上传文件夹到Linux命令)
    5.          本地文件位置            用户名       ip      上传位置
    6.输入密码
	
Linux安装mongodb
	1.wget http://downloads.mongodb.org/linux/mongodb-linux-i686-2.4.9.tgz(下载32位或者64位)
	2.tar -zxvf mongodb-linux-i686-2.4.9.tgz(解压)
	3.mv mongodb-linux-i686-2.4.9.tgz mongodb(修改名称)
	4.cd mongodb
	5.mkdir data (新建mongodb数据库文件夹)
	6../bin/mongod --dbpath=/usr/local/mongodb/mongodb/data/ & (启动,&是后台启动)
	7.访问(http://192.168.50.128:28017/)

Linux安装gogos(git的页面管理项目)
	1.先安装go语言
	2.wget https://redirector.gvt1.com/edgedl/go/go1.9.2.linux-386.tar.gz (下载go语言文件包32/64位)
	3.tar -zxvf go1.9.2.linux-386.tar.gz (解压)
	4.vim /etc/profile 在文件末尾增加 (添加go语言的全局目录)
		export GOROOT=/usr/local/go/go
		export GOPATH=/usr/local/go
		PATH=$PATH:$GOROOT/bin:$GOPATH/bin
	5.go get -u github.com/gogits/gogs (下载gogs源文件)
	6.cd $GOPATH/src/github.com/gogits/gogs
	7.go build (编译与构建)
	8.cd $GOPATH/src/github.com/gogits/gogs ()
	9../gogs web & (后台启动gogs项目，需要使用git用户启动项目)
	
	注意：	1.默认访问路径是 127.0.0.1:3000
			2.需要使用git用户启动项目
			3.需要新建gogs的数据库
		

mysql5.7.20(5.7.8以上字段支持json数据格式)
	建表：
	CREATE TABLE table_name (
		id INT(10) UNSIGNED NOT NULL,
		json_col json,
		PRIMARY KEY (id)
	)
	
	insert:
		insert into table_name(id, json_col) values (1, '{"a": 1, "b": {"a": 2}}');
		insert into table_name(id, json_col) values (2, '{"a": 2, "b": [1, 2, 3]}');
		insert into table_name(id, json_col) values (3, '{"a": 5}');
	
	update:
		修改json数据(json_set()  直接修改数据)
		UPDATE table_name SET json_col = json_set(json_col, '$.a', 4) WHERE id = 3;   id=3的json_col数据为{"a": 5}
		向json数据追加数据(json_array_append() 数组追加数据)
		UPDATE table_name SET json_col = json_array_append(json_col,'$.b',4) WHERE id = 2;    id=2的json_col数据为{"a": 2, "b": [1, 2, 3, 4]}
		在指定位置插入数据(json_array_insert()数组指定位置插入数据)
		UPDATE table_name SET json_col = json_array_insert(json_col,'$.b[3]',5) WHERE id = 2;     id=2的json_col数据为{"a": 2, "b": [1, 2, 3, 5, 4]}
		合并接送数据(json_merge()合并接送数据)
		UPDATE table_name SET json_col = json_merge(json_col,'{"b":3}') WHERE id = 3    id=3的json_col数据为{"a": 5, "b": 3}
		替换数据(json_replace()根据key替换json数据)
		UPDATE table_name SET json_col = json_replace(json_col,'$.b','{"c":3}') WHERE id = 3    id=3的json_col数据为{"a": 5, "b": "{\"c\":3}"}

	select:
		根据json的可以，获取值
		select json_extract(json_col,"$.a") from table_name where id = 1    结果：1
		替代json_extract()函数
		select json_col -> '$.a' from table_name where id = 1    结果：1
		查询json第一层所有key，并以数组格式返回
		SELECT json_keys(json_col) FROM table_name;    结果：["a", "b"] 
		查询以json字段数据作条件查询
		SELECT * FROM table_name WHERE json_col -> '$.a' > 2;    结果：id=3的记录
		
	json数据常用处理函数：
		json_append()	JSON文件追加数据
		json_array([val[, val] ...])	创建JSON数组
		json_array_append(json_doc, path, val[, path, val] ...)	给指定的节点，添加元素，如果节点不是数组，则先转换成[doc]
		json_array_insert(json_doc, path, val[, path, val] ...)	在数组的指定下标处插入元素
		json_contains(json_doc, val[, path])	是否包含子文档
        json_contains_path(json_doc, one_or_all, path[, path] ...)	检查路径是否存在
        json_depth(json_doc)	JSON文档的最大深度
        json_extract(json_doc, path[, path] ...)	获得doc中某个或多个节点的值。
        json_insert(json_doc, path, val[, path, val] ...)	如果不存在对应属性则插入,否则不做任何变动
        json_keys(json_doc[, path])	返回指定path的key
        json_length(json_doc[, path])	返回数组的长度，如果是object则是属性个数，常量则为1
        json_merge(json_doc, json_doc[, json_doc] ...)	将多个doc合并
        json_merge_preserve()	合并的JSON文件，保存重复键
        json_object([key, val[, key, val] ...])	创建JSON对象
        json_quote()	引用JSON文档
        json_remove(json_doc, path[, path] ...)	如果存在则删除对应属性,否则不做任何变动
        json_replace(json_doc, path, val[, path, val] ...)	如果存在则替换,否则不做任何变动
        json_search(json_doc, one_or_all, search_str[, escape_char[, path] ...])	强大的查询函数，用于在doc中返回符合条件的节点，select则是在表中返回符合要求的纪录
        json_set(json_doc, path, val[, path, val] ...)	修改数据
        json_type()	JSON值类型
        json_unquote()	JSON值而言
        json_valid()	JSON值是否是有效的
	


shiro的github地址
https://github.com/zhangkaitao/shiro-example.git(多示例)
http://code.taobao.org/p/ssm_kaiyuan/src/trunk/src/com/wanhejia/shiro/
https://github.com/sharetop/shiro-extension/tree/develop/

mycat地址
https://github.com/MyCATApache/Mycat-Server

马爷个人代码地址
https://git.oschina.net/702009189/jy.web

https://github.com/piggsoft/Awesome-IT-Books
阿里巴巴js插件
https://github.com/kissygalleryteam

kafka
http://www.2cto.com/kf/201704/626687.html
http://blog.csdn.net/hcmdy/article/details/52208122

大量视屏文件
http://yun.baidu.com/wap/share/home?uk=422927267&third=0&errno=0&errmsg=Auth%20Login%20Sucess&&bduss=&ssnerror=0&adapt=pc&fr=ftw

netty文档
http://pan.baidu.com/share/link?shareid=2248761098&uk=3861080331&errno=0&errmsg=Auth%20Login%20Sucess&&bduss=&ssnerror=0#list/path=%2F%E5%90%88%E5%B9%B6%E6%96%87%E4%BB%B6%2F%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%2Fhadoop2.x%2FSpark%E4%BA%9A%E5%A4%AA%E7%A0%94%E7%A9%B6%E9%99%A2%2FJava-NIO-Netty%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0&parentPath=%2F%E5%90%88%E5%B9%B6%E6%96%87%E4%BB%B6%2F%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%2Fhadoop2.x%2FSpark%E4%BA%9A%E5%A4%AA%E7%A0%94%E7%A9%B6%E9%99%A2

//java游戏链接
http://blog.csdn.net/simon_world/article/details/41791277

//葛俊
https://github.com/gejun123456/bootstrap-java-blog

//netty实战
https://github.com/ReactivePlatform/netty-in-action-cn
//netty in action注释
http://www.linkedkeeper.com/list/cat.action?cid=1&page=3

//springMVC相关
http://www.yiibai.com/spring_mvc/spring-4-mvc-contentnegotiatingviewresolver-example.html

//资料
https://item.taobao.com/item.htm?spm=a230r.1.14.40.ofC72U&id=546546280940&ns=1&abbucket=12#detail
http://xueliang.org/article/

//spring-security4
http://www.cnblogs.com/softidea/p/6914279.html
http://git.oschina.net/shengzhao/spring-oauth-server
//kafka
http://blog.csdn.net/evankaka
//bootstart的时间插件
https://uxsolutions.github.io/bootstrap-datepicker
//各种工具集成
http://div.io/digg/alibaba







